-- MintClassics Warehouse Optimization Analysis
-- Author: Harshika
-- Purpose: Use SQL to derive insights for optimizing warehouse operations
-- Technologies: MySQL, SQL JOINs, Aggregations, Grouping, Filtering
-- File contains 5 parts: Data Overview, Product Flow, Regional Revenue, Sales Rep Performance, Inventory Strategy

-- How can Mintclassics optimize warehouse operations to improve product availability, reduce understanding or overstocking and ensure timely fulfillment?

-- ===========================
-- Understanding the data Base 
-- ===========================

-- What key entities and relationships exist in the database to help understand warehouse-related operations
use mintclassics;
-- Using the database mintclassics for the business problem 
show tables;
-- checking all the existing tables in the database
-- There are total of 9 tables
-- customers -- Demographic details about customers 
-- employees -- Emploee details 
-- Offices -- Office details with code, location 
-- orderdetails -- order details with order ID, product name, price, quantity 
-- Orders -- Order number, ordered date, required date, shipped date, comments 
-- Payments -- Payments done by customer with customer name, cheque number, payment date, amount 
-- Productlines -- product description in text, Image 
-- Products -- product details like product description, quatity, price, description, warehouse code
-- Warehouse -- warehouse code, loaction 
describe orders;
-- Describes how the table is. datatypes, whether the bull values are present or not, column names and primary key of the table 
select * from orders limit 10;
-- shows top 10 rows in orders tables 
select count(distinct customerNumber) as total_customers from customers;
-- counts the total no of values in customers columns, where as distinct helps you to make sure customerNumber is counted only once.
select distinct status from orders;
-- gives distinct values from status columns in orders tables 

-- ==================================
-- Analyzing Product Flow 
-- ==================================
-- will check with the top 10 selling products by total quantity ordered

select 
od.productCode,
p.productName,
Sum(od.quantityOrdered) as total_quantity 
from 
orderdetails od 
join 
products p on od.productCode = p.productCode 
Group by 
od.productCode, p.productName
order by 
total_quantity DESC;

-- To optimize the ware house spacing and also to know which product is the fastest selling from ware house, need to check the quantity of each product selling
-- According to the output 1972 Alfa Romeo GTA is the top selling product. 

-- Total revenue generated by each product 
select 
od.productCode,
p.productName,
sum(od.quantityOrdered * od.priceeach) as total_revenue
from
orderdetails od
join 
products p on od.productCode = p.productCode
Group by 
od.productCode, p.productName
order by
total_revenue DESC; 

-- Even sometimes top selling items can't procide the highest revenue. In this case the highest revenue is provided by 1992 Ferrari 360 Spider red is the highest selling item. May be it could be the pricded product.
-- The ware house should contain both highest selling product as well as the product that gets revenue to the company. so that the company could be satisfy different range of customers.

-- =================================
-- Regional and Office Analysis 
-- =================================

select 
o.officeCode,
o.city,
o.country,
sum(od.quantityOrdered * od.priceEach) as office_revenue 
from 
orders ord 
join 
orderdetails od on ord.orderNumber = od.orderNumber 
join
customers c on ord.customerNumber = c.customerNumber 
join 
employees e on c.salesRepEmployeeNumber = e.employeeNumber
JOIN 
    offices o ON e.officeCode = o.officeCode
GROUP BY 
    o.officeCode, o.city, o.country
ORDER BY 
    office_revenue DESC;

-- to know which location is having highest revenue, so that it reflects which team can manage customers more effeciently. According to the output France office has the highest revenue 
-- But what is the average order value to make them outstanding among all other countries 
SELECT 
    c.country,
    AVG(od.quantityOrdered * od.priceEach) AS avg_order_value
FROM 
    orders ord
JOIN 
    orderdetails od ON ord.orderNumber = od.orderNumber
JOIN 
    customers c ON ord.customerNumber = c.customerNumber
GROUP BY 
    c.country
ORDER BY 
    avg_order_value DESC;

-- Eventhough france has the highest revenue among all the countries, but switzerland has highest average order value. 

-- ============================
-- Employee & Sales Rep Efficiency 
-- ============================

-- We know which country has efficiency in managing customers, but we also need which emploee has effeciency for that will check for highest total sales revenue for employees 

SELECT 
    e.employeeNumber,
    e.firstName,
    e.lastName,
    SUM(od.quantityOrdered * od.priceEach) AS total_sales
FROM 
    orders ord
JOIN 
    orderdetails od ON ord.orderNumber = od.orderNumber
JOIN 
    customers c ON ord.customerNumber = c.customerNumber
JOIN 
    employees e ON c.salesRepEmployeeNumber = e.employeeNumber
GROUP BY 
    e.employeeNumber, e.firstName, e.lastName
ORDER BY 
    total_sales DESC;

-- According to the output Employee number 1370 named Gerard Hernandez has the highest sales. 
-- ==============================
-- Inventory & Product Line Analysis (Practical Business Insight)
-- =============================
-- Which product lines has the highest revenue 
select 
pl.productLine,
    SUM(od.quantityOrdered * od.priceEach) AS revenue
FROM 
    orderdetails od
JOIN 
    products p ON od.productCode = p.productCode
JOIN 
    productlines pl ON p.productLine = pl.productLine
GROUP BY 
    pl.productLine
ORDER BY 
    revenue DESC;

-- According to the output Classic Cars productline has the highest revenue 
-- Now based on these will see which product might have the lowest chances for restocking 

SELECT 
    p.productCode,
    p.productName,
    SUM(od.quantityOrdered) AS total_ordered
FROM 
    orderdetails od
JOIN 
    products p ON od.productCode = p.productCode
GROUP BY 
    p.productCode, p.productName
ORDER BY 
    total_ordered ASC;
    
-- According to the output 1957 Ford Thunderbird has less orders




 
